{"version":3,"sources":["redux/constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Count","state","value","selectNumber","props","decrement","incrementIfOdd","count","incrementAsync","incrementAync","console","log","this","personCount","ref","c","onClick","Component","connect","person","length","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","persons","map","p","App","initState","combineReducers","preState","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"8KAIaA,EAAY,YACZC,EAAY,YACZC,EAAa,aCIbC,EAAY,SAAAC,GAAI,MAAK,CAAEC,KAAML,EAAWI,KAAMA,I,OCyBrDE,E,4MACFC,MAAQ,G,EAGRJ,UAAY,WACR,IAAQK,EAAU,EAAKC,aAAfD,MACR,EAAKE,MAAMP,UAAkB,EAARK,I,EAGzBG,UAAY,WACR,IAAQH,EAAU,EAAKC,aAAfD,MACR,EAAKE,MAAMC,UAAkB,EAARH,I,EAGzBI,eAAiB,WACb,IAAQJ,EAAU,EAAKC,aAAfD,MACJ,EAAKE,MAAMG,MAAQ,IAAM,GACzB,EAAKH,MAAMP,UAAkB,EAARK,I,EAI7BM,eAAiB,WACb,IAAQN,EAAU,EAAKC,aAAfD,MACR,EAAKE,MAAMK,cAAsB,EAARP,EAAW,M,4CAGxC,WAAU,IAAD,OAEL,OADAQ,QAAQC,IAAI,0DAAmBC,KAAKR,OAEhC,gCACI,+DACA,sEAAWQ,KAAKR,MAAMG,MAAtB,0DAAuCK,KAAKR,MAAMS,eAClD,yBAAQC,IAAK,SAAAC,GAAC,OAAI,EAAKZ,aAAeY,GAAtC,UACI,wBAAQb,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,kBANR,OAQI,wBAAQc,QAASJ,KAAKf,UAAtB,eARJ,OASI,wBAAQmB,QAASJ,KAAKP,UAAtB,eATJ,OAUI,wBAAQW,QAASJ,KAAKN,eAAtB,oEAVJ,OAWI,wBAAQU,QAASJ,KAAKJ,eAAtB,gCAXJ,c,GA7BQS,aAgDLC,eACX,SAAAjB,GAAK,MAAK,CACNM,MAAON,EAAMM,MACbM,YAAaZ,EAAMkB,OAAOC,UAiB9B,CACIvB,YACAQ,UD3FiB,SAAAP,GAAI,MAAK,CAAEC,KAAMJ,EAAWG,KAAMA,IC4FnDW,cDjFqB,SAACX,EAAMuB,GAChC,OAAO,SAACC,GACJC,YAAW,WACPD,EAASzB,EAAUC,MACpBuB,MCsDIH,CAyBblB,G,QCvGIwB,E,4MAEFC,UAAY,WACR,IAAMC,EAAO,EAAKC,SAASzB,MACrB0B,EAAM,EAAKC,QAAQ3B,MACnB4B,EAAY,CAAEC,GAAIC,cAAUN,OAAME,OACxClB,QAAQC,IAAImB,GACZ,EAAK1B,MAAMqB,UAAUK,GACrB,EAAKH,SAASzB,MAAQ,GACtB,EAAK2B,QAAQ3B,MAAQ,I,4CAEzB,WAAU,IAAD,OACL,OACI,gCACI,0GAAsBU,KAAKR,MAAMG,SACjC,uBAAOO,IAAK,SAAAC,GAAC,OAAI,EAAKY,SAAWZ,GAAGhB,KAAK,OAAOkC,YAAY,6BAFhE,OAGI,uBAAOnB,IAAK,SAAAC,GAAC,OAAI,EAAKc,QAAUd,GAAGhB,KAAK,OAAOkC,YAAY,6BAH/D,OAII,wBAAQjB,QAASJ,KAAKa,UAAtB,0BACA,6BAEQb,KAAKR,MAAM8B,QAAQC,KAAI,SAACC,GACpB,OAAO,+BAAgBA,EAAEV,KAAlB,MAA2BU,EAAER,MAApBQ,EAAEL,gB,GArBzBd,aA6BNC,eACX,SAAAjB,GAAK,MAAK,CACNiC,QAASjC,EAAMkB,OACfZ,MAAON,EAAMM,SAEjB,CAAEkB,UCpCmB,SAAAK,GAAS,MAAK,CAAE/B,KAAMH,EAAYE,KAAMgC,KD+BlDZ,CAMbM,GEpCmBa,E,4JACjB,WACI,OACI,gCACI,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,W,GANiBpB,a,mCCF3BqB,EAAY,CAAC,CAAEP,GAAI,MAAOL,KAAM,MAAOE,IAAK,KCUnCW,gCAAgB,CAC3BhC,MCLW,WAAqD,IAA9BiC,EAA6B,uDADlD,EAC0CC,EAAQ,uCAC/D/B,QAAQC,IAAI6B,EAAUC,GACtB/B,QAAQC,IAAI6B,GAKZ,IAAQzC,EAAe0C,EAAf1C,KAAMD,EAAS2C,EAAT3C,KAGd,OAAQC,GACJ,KAAKL,EACD,OAAO8C,EAAW1C,EACtB,KAAKH,EACD,OAAO6C,EAAW1C,EAEtB,QAEI,OAAO0C,IDZfrB,ODXW,WAAsD,IAA/BqB,EAA8B,uDAAnBF,EAAWG,EAAQ,uCAChE/B,QAAQC,IAAI,oBACZ,IAAQZ,EAAe0C,EAAf1C,KAAMD,EAAS2C,EAAT3C,KACd,OAAQC,IACCH,EACK,CAAEE,GAAR,mBAAiB0C,IAEVA,KGIJE,wBAAYC,EAASC,8BAAoBC,0BAAgBC,OCPxEC,IAASC,OAEL,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.95f20d96.chunk.js","sourcesContent":["/*\r\n    该模块是用于定义action对象中type类型的常量值,目的只有一个：便于管理的同时防止程序员单词写错；\r\n*/\r\n\r\nexport const INCREMENT = 'increment'\r\nexport const DECREMENT = 'decrement'\r\nexport const ADD_PERSON = 'add_person'","/*\r\n    该文件专门为Count组件生成action对象\r\n*/\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n// import store from './store'\r\n\r\n// 同步 action ，就是指action的值为Object类型的一般对象；\r\n// function createIncrementAction(data) {\r\n//     return { type: 'increment', data: data }\r\n// }\r\nexport const increment = data => ({ type: INCREMENT, data: data })\r\n// function createDecrementAction(data) {\r\n//     return { type: 'decrement', data: data }\r\n// }\r\nexport const decrement = data => ({ type: DECREMENT, data: data })\r\n\r\n// 异步 action ，就是指action的值为函数；异步action中一般都会调用同步action；异步 action不是必须要用的\r\n// export const createIncrementAyncAction = (data, time) => {\r\n//     return () => {\r\n//         setTimeout(() => {\r\n//             store.dispatch(createIncrementAction(data))\r\n//         }, time)\r\n//     }\r\n// }\r\n\r\nexport const incrementAync = (data, time) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            dispatch(increment(data))\r\n        }, time)\r\n    }\r\n}","import React, { Component } from 'react'\r\n// 引入connect用于连接UI组件与redux\r\nimport { connect } from 'react-redux'\r\n// 引入action\r\nimport { increment, decrement, incrementAync } from '../../redux/actions/count'\r\n\r\n// 映射状态\r\n// function mapStateToProps(state) { //state为redux中保存的状态（由redux调用，不用自己引入）\r\n//     return { count: state }\r\n// }\r\n\r\n// const mapStateToProps = (state) => { \r\n//     return { count: state }\r\n// }\r\n\r\n// const mapStateToProps = state => ({ count: state })\r\n\r\n\r\n// 映射操作状态的方法\r\n// const mapDispatchToProps = dispatch => (\r\n//     { //返回一个对象，对象里面是一组key value\r\n//         jia: data => {\r\n//             // 通知redux执行加法\r\n//             dispatch(createIncrementAction(data))\r\n//         },\r\n//         jian: (data) => {\r\n//             dispatch(createDecrementAction(data))\r\n//         },\r\n//         jiaAsync: (data, time) => {\r\n//             dispatch(createIncrementAyncAction(data, time))\r\n//         }\r\n//     }\r\n// )\r\n\r\n// 定义UI组件\r\nclass Count extends Component {\r\n    state = {}\r\n\r\n    // 加法\r\n    increment = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.increment(value * 1)\r\n    }\r\n    // 减法\r\n    decrement = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.decrement(value * 1)\r\n    }\r\n    // 奇数再加\r\n    incrementIfOdd = () => {\r\n        const { value } = this.selectNumber\r\n        if (this.props.count % 2 !== 0) {\r\n            this.props.increment(value * 1)\r\n        }\r\n    }\r\n    // 异步加\r\n    incrementAsync = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.incrementAync(value * 1, 500)\r\n    }\r\n\r\n    render() {\r\n        console.log('UI组件接收到的props是：', this.props);\r\n        return (\r\n            <div>\r\n                <h1>我是Count组件</h1>\r\n                <h4>当前求和为：{this.props.count},下方组件总人数为：{this.props.personCount}</h4>\r\n                <select ref={c => this.selectNumber = c}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>&nbsp;\r\n                <button onClick={this.increment}>+</button>&nbsp;\r\n                <button onClick={this.decrement}>-</button>&nbsp;\r\n                <button onClick={this.incrementIfOdd}>当前求和为奇数再加</button>&nbsp;\r\n                <button onClick={this.incrementAsync}>异步加</button>&nbsp;\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// connect是一个函数，connect函数调用的返回值依然是一个函数\r\n//使用 connect()() 创建并暴露一个Count的容器组件\r\nexport default connect(\r\n    state => ({\r\n        count: state.count,\r\n        personCount: state.person.length\r\n    }),\r\n\r\n    // mapDispatchToProps的一般写法（写成一个函数）\r\n    // dispatch => ({ //返回一个对象，对象里面是一组key value\r\n    //     jia: data => {\r\n    //         // 通知redux执行加法\r\n    //         dispatch(createIncrementAction(data))\r\n    //     },\r\n    //     jian: (data) => {\r\n    //         dispatch(createDecrementAction(data))\r\n    //     },\r\n    //     jiaAsync: (data, time) => {\r\n    //         dispatch(createIncrementAyncAction(data, time))\r\n    //     }\r\n    // })\r\n    // mapDispatchToProps的一般简写(可以简写成一个对象)\r\n    {\r\n        increment,\r\n        decrement,\r\n        incrementAync,\r\n    }\r\n)(Count)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { nanoid } from 'nanoid'\r\nimport { addPerson } from '../../redux/actions/person'\r\n\r\nclass Person extends Component {\r\n\r\n    addPerson = () => {\r\n        const name = this.nameNode.value\r\n        const age = this.ageNode.value\r\n        const personObj = { id: nanoid(), name, age }\r\n        console.log(personObj);\r\n        this.props.addPerson(personObj)\r\n        this.nameNode.value = ''\r\n        this.ageNode.value = ''\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>我是Person组件，上方求和为：{this.props.count}</h1>\r\n                <input ref={c => this.nameNode = c} type='text' placeholder='输入姓名' />&nbsp;\r\n                <input ref={c => this.ageNode = c} type='text' placeholder='输入年龄' />&nbsp;\r\n                <button onClick={this.addPerson}>添加</button>\r\n                <ul>\r\n                    {\r\n                        this.props.persons.map((p) => {\r\n                            return <li key={p.id}>{p.name}---{p.age}</li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({  //此处的state是redux帮忙保存的总状态对象\r\n        persons: state.person,\r\n        count: state.count\r\n    }),\r\n    { addPerson }\r\n)(Person)","import { ADD_PERSON } from '../constant'\r\n\r\n// 创建增加一个人的action动作对象\r\nexport const addPerson = personObj => ({ type: ADD_PERSON, data: personObj })","import React, { Component } from 'react'\r\nimport Count from './containers/Count' //引入的是Count的容器组件\r\nimport Person from './containers/Person'//引入的是Person的容器组件\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Count />\r\n                <hr/>\r\n                <Person />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { ADD_PERSON } from '../constant'\r\n\r\nconst initState = [{ id: '001', name: 'tom', age: 19 }] //初始化人的列表\r\nexport default function personReducer(preState = initState, action) {\r\n    console.log(\"@@@personReducer\");\r\n    const { type, data } = action\r\n    switch (type) {\r\n        case ADD_PERSON: //若是添加一个人\r\n            return [data, ...preState]\r\n        default:\r\n            return preState\r\n    }\r\n}","/*\r\n    该文件用于汇总所有的reducer为一个总的reducer\r\n*/\r\n\r\n// 引入combineReducers，用于汇总多个reducer\r\nimport { combineReducers } from 'redux'\r\n// 引入为Count组件服务的reducer\r\nimport count from './count'\r\n// 引入为Person组件服务的reducer\r\nimport person from './person'\r\n\r\n// 汇总所有的 reducer 变为一个总的 reducer;\r\nexport default combineReducers({\r\n    count: count,\r\n    person: person,\r\n})","/*\r\n    1、该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数;\r\n    2、reducer函数会接到两个参数，分别为：之前的状态（preState），动作对象（action）\r\n*/\r\nimport { INCREMENT, DECREMENT } from '../constant'\r\n\r\n// 初始化状态方法3、const initSate = 0（比较清晰）\r\nconst initSate = 0\r\nexport default function count_reducer(preState = initSate, action) {\r\n    console.log(preState, action); //0 {type: '@@redux/INITp.w.c.r.o.e'}\r\n    console.log(preState); //点加号，如果方法奏效，preState是变化的\r\n    // 初始化状态方法2、用if判断\r\n    //if (preState === undefined) preState = 0\r\n\r\n    // 从action对象中获取：type, data \r\n    const { type, data } = action\r\n    \r\n    // 根据type决定如何加工数据\r\n    switch (type) {\r\n        case INCREMENT: //如果是“加”\r\n            return preState + data\r\n        case DECREMENT: //如果是“减”\r\n            return preState - data\r\n        //break;  //已经return了，就不需要break了\r\n        default:\r\n            // 初始化状态方法1、直接return 0（可读性不强）\r\n            return preState\r\n    }\r\n}","/*\r\n    该文件专门用于暴露一个store对象，整个应用只有一个store对象\r\n*/\r\n\r\n// 引入createStore,专门用于创建redux中最为核心的store对象\r\nimport { createStore, applyMiddleware } from 'redux'\r\n// 引入 redux-thunk，用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n// 引入redux-devtools-extension\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n// 引入汇总之后的reducer\r\nimport reducer from './reducers'\r\n\r\n// 暴露store\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\n\r\n// 如果用了react-redux就不用自己监测，容器组件自己具有监测的能力；\r\nReactDOM.render(\r\n    //  此处需要用Provider包裹App,目的是让App所有的后代容器组件都能接收到store\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}